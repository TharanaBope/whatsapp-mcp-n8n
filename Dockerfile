FROM golang:1.24.1 as builder

# Install Python
RUN apt-get update && apt-get install -y python3 python3-pip python3-venv

# Set working directory
WORKDIR /app

# Copy go mod and sum files
COPY whatsapp-bridge/go.mod whatsapp-bridge/go.sum ./whatsapp-bridge/

# Download all dependencies
RUN cd whatsapp-bridge && go mod download

# Copy the source code
COPY whatsapp-bridge ./whatsapp-bridge
COPY whatsapp-mcp-server ./whatsapp-mcp-server

# Create Python virtual environment and install dependencies
RUN python3 -m venv /app/venv
RUN /app/venv/bin/pip install --upgrade pip
RUN /app/venv/bin/pip install -r whatsapp-mcp-server/requirements.txt
RUN /app/venv/bin/pip install fastapi uvicorn

# Create directory for persistent storage
RUN mkdir -p /app/whatsapp-bridge/store

# Add script to manually test and check WhatsApp connection
RUN echo 'import os\n\
import time\n\
import subprocess\n\
import threading\n\
\n\
def run_whatsapp_bridge():\n\
    print("Starting WhatsApp bridge...")\n\
    os.system("cd /app/whatsapp-bridge && go run main.go 2>&1 | tee /app/qr_log.txt")\n\
\n\
def run_health_server():\n\
    print("Starting health server...")\n\
    os.system("cd /app/whatsapp-mcp-server && /app/venv/bin/python /app/healthcheck.py")\n\
\n\
# Start the WhatsApp bridge in a separate thread\n\
bridge_thread = threading.Thread(target=run_whatsapp_bridge)\n\
bridge_thread.daemon = True\n\
bridge_thread.start()\n\
\n\
# Give the bridge a moment to initialize before starting the health server\n\
time.sleep(5)\n\
\n\
# Run the health server in the main thread\n\
run_health_server()\n\
' > /app/runner.py

# Create a health check server Python script
RUN echo 'import os\n\
import uvicorn\n\
from fastapi import FastAPI, HTTPException\n\
import subprocess\n\
import threading\n\
import time\n\
import json\n\
\n\
app = FastAPI()\n\
\n\
@app.get("/")\n\
def read_root():\n\
    return {"status": "ok", "message": "WhatsApp Bridge running"}\n\
\n\
@app.get("/qr")\n\
def get_qr_status():\n\
    # Check if the QR code has been generated by looking for logged messages\n\
    try:\n\
        import re\n\
        try:\n\
            with open("/app/qr_log.txt", "r") as f:\n\
                log_content = f.read()\n\
                if "Successfully connected and authenticated" in log_content:\n\
                    return {"status": "authenticated", "message": "WhatsApp is authenticated"}\n\
                elif "Scan this QR code" in log_content:\n\
                    # Extract the QR code ASCII art if possible\n\
                    qr_match = re.search(r"(█+[\\s\\S]*?QR code[\\s\\S]*?▀▀▀▀)", log_content, re.DOTALL)\n\
                    if qr_match:\n\
                        qr_text = qr_match.group(1)\n\
                        return {\n\
                            "status": "qr_ready", \n\
                            "message": "QR code is ready to scan", \n\
                            "qr": qr_text\n\
                        }\n\
                    return {"status": "qr_ready", "message": "QR code is ready to scan, check logs"}\n\
                else:\n\
                    # Check if the bridge is running\n\
                    try:\n\
                        result = subprocess.run(["ps", "aux"], capture_output=True, text=True)\n\
                        if "main.go" in result.stdout:\n\
                            return {"status": "starting", "message": "WhatsApp bridge is starting, waiting for QR code"}\n\
                        else:\n\
                            # Try to start the bridge again\n\
                            subprocess.Popen(["bash", "-c", "cd /app/whatsapp-bridge && go run main.go 2>&1 | tee -a /app/qr_log.txt &"])\n\
                            return {"status": "restarting", "message": "WhatsApp bridge was not running, attempting to restart"}\n\
                    except Exception as e:\n\
                        return {"status": "error", "message": f"Error checking bridge status: {str(e)}"}\n\
        except FileNotFoundError:\n\
            # If the log file doesn\'t exist yet, the bridge might not be running\n\
            subprocess.Popen(["bash", "-c", "cd /app/whatsapp-bridge && go run main.go 2>&1 | tee /app/qr_log.txt &"])\n\
            return {"status": "starting", "message": "Log file not found, starting WhatsApp bridge"}\n\
    except Exception as e:\n\
        return {"status": "error", "message": f"Error checking QR status: {str(e)}"}\n\
\n\
@app.get("/logs")\n\
def get_logs():\n\
    try:\n\
        with open("/app/qr_log.txt", "r") as f:\n\
            log_content = f.read()\n\
            return {"logs": log_content}\n\
    except FileNotFoundError:\n\
        return {"logs": "No logs found yet"}\n\
\n\
def start_whatsapp_mcp():\n\
    time.sleep(2)  # Give the health check server time to start\n\
    env = os.environ.copy()\n\
    env["MCP_TRANSPORT"] = "stdio"\n\
    subprocess.run(["/app/venv/bin/python", "main.py"], env=env)\n\
\n\
# Start WhatsApp MCP in a separate thread\n\
thread = threading.Thread(target=start_whatsapp_mcp)\n\
thread.daemon = True\n\
thread.start()\n\
\n\
if __name__ == "__main__":\n\
    port = int(os.environ.get("PORT", 8000))\n\
    print(f"Starting health check server on port {port}")\n\
    uvicorn.run(app, host="0.0.0.0", port=port)\n' > /app/healthcheck.py

# Expose the port that Render will scan for
EXPOSE 8000

# Set the startup command to use the Python runner script
CMD ["/app/venv/bin/python", "/app/runner.py"]